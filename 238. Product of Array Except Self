class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] leftProducts = new int[n];
        int[] rightProducts = new int[n];
        int[] result = new int[n];
        
        // Calculate products of all elements to the left of each element
        leftProducts[0] = 1;
        for (int i = 1; i < n; i++) {
            leftProducts[i] = leftProducts[i - 1] * nums[i - 1];
        }
        
        // Calculate products of all elements to the right of each element
        rightProducts[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            rightProducts[i] = rightProducts[i + 1] * nums[i + 1];
        }
        
        // Multiply left and right products to get the final result
        for (int i = 0; i < n; i++) {
            result[i] = leftProducts[i] * rightProducts[i];
        }
        
        return result;
    }
}



===============================================================




Approach
Create two arrays:

leftProducts[i]: product of all elements before index i.
rightProducts[i]: product of all elements after index i.
Traverse from left to right to fill leftProducts.

Traverse from right to left to fill rightProducts.

For each index i, result = leftProducts[i] * rightProducts[i].

This way, each element excludes itself but includes all other products.
